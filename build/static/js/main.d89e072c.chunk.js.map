{"version":3,"sources":["spotifyIcon.png","appleIconWhite.svg","cassette-tape.png","Spotify.js","Apple.js","Bars.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Spotify","className","href","target","src","spotifyLogo","alt","Apple","appleIcon","Bars","App","form","document","getElementById","addEventListener","e","preventDefault","fetch","method","body","FormData","then","response","console","log","alert","reset","catch","error","cassette","name","id","type","placeholder","required","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,6QCI5B,SAASC,IACpB,OACI,yBAAKC,UAAU,mBACX,uBAAGC,KAAK,2DAA2DC,OAAO,SAASF,UAAU,gBACzF,0BAAMA,UAAU,iBACZ,2CACA,yBAAKG,IAAKC,IAAaJ,UAAU,eAAeK,IAAI,oB,0BCNzD,SAASC,IACpB,OACI,yBAAKN,UAAU,uBACf,uBAAGC,KAAK,qFAAqFC,OAAO,SAASF,UAAU,cAEvH,0BAAMA,UAAU,eAAc,iDAC9B,yBAAKG,IAAKI,IAAWF,IAAI,mBAAmBL,UAAU,iB,MCR/C,SAASQ,IAEpB,OACI,yBAAKR,UAAU,eACX,yBAAKA,UAAU,aACf,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,e,oBCDNS,G,kMAGjB,IACMC,EAAOC,SAASC,eAAe,eAErCF,EAAKG,iBAAiB,SAAU,SAAAC,GAC9BA,EAAEC,iBACFC,MALgB,kGAKC,CACfC,OAAQ,OACRC,KAAM,IAAIC,SAAST,KAElBU,KAAK,SAAAC,GAAQ,OAAIC,QAAQC,IAAI,WAAYF,KACzCD,KAAKI,MAAM,6CACXJ,KAAKV,EAAKe,SACVC,MAAM,SAAAC,GAAK,OAAIL,QAAQC,IAAI,UAAWI,S,+BAM3C,OACE,yBAAK3B,UAAU,OACb,wBAAIA,UAAU,cAAd,QAEA,kBAAC,EAAD,MAEA,yBAAKA,UAAU,oBACb,0BAAMA,UAAU,WAAhB,eACA,yBAAKG,IAAKyB,IAAU5B,UAAU,WAAWK,IAAI,aAC7C,yBAAKL,UAAU,eACb,yBAAKA,UAAU,SAAf,aACA,yBAAKA,UAAU,QACb,6RAAkQ,6BAAlQ,gCAKJ,kBAAC,EAAD,MACA,kBAAC,EAAD,MAGF,yBAAKA,UAAU,WACb,0BAAM6B,KAAK,yBAAyBC,GAAG,eACrC,yBAAK9B,UAAU,SAAQ,kDACvB,2BAAO+B,KAAK,QAAQF,KAAK,QAAQG,YAAY,iBAAiBhC,UAAU,cAAciC,UAAQ,IAC9F,2BAAOF,KAAK,SAASG,MAAM,YAAYlC,UAAU,qB,GA9C5BmC,cCKbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS/B,SAASC,eAAe,SD2H3C,kBAAmB+B,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC,iB","file":"static/js/main.d89e072c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spotifyIcon.b818d523.png\";","module.exports = __webpack_public_path__ + \"static/media/appleIconWhite.1bcaf4d8.svg\";","module.exports = __webpack_public_path__ + \"static/media/cassette-tape.428d2d44.png\";","import React from 'react'\nimport './Spotify.css'\nimport spotifyLogo from './spotifyIcon.png'\n\nexport default function Spotify() {\n    return (\n        <div className=\"spotify-wrapper\">\n            <a href=\"https://open.spotify.com/playlist/0DZd5IeXplyPhGbV7wFA4S\" target=\"_blank\" className=\"spotify-link\">\n                <span className=\"spotify-title\">\n                    <strong>Spotify</strong>\n                    <img src={spotifyLogo} className=\"spotify-icon\" alt=\"spotify-icon\"></img>\n                </span>\n            </a>\n        </div>\n    )\n}","import React from 'react'\nimport './Apple.css'\nimport appleIcon from './appleIconWhite.svg'\n\nexport default function Apple() {\n    return (\n        <div className=\"apple-music-wrapper\">\n        <a href=\"https://music.apple.com/in/playlist/chapter-005-its-out-there/pl.u-XkD04Mpf2NYDXV7\" target=\"_blank\" className=\"apple-link\">\n\n        <span className=\"apple-title\"><strong>Apple Music </strong></span>\n        <img src={appleIcon} alt=\"apple-music-icon\" className=\"apple-icon\"></img>\n        </a>\n        </div>\n    )\n}\n","import React from 'react'\nimport './Bars.css'\nexport default function Bars() {\n  \n    return (\n        <div className=\"bar-wrapper\">\n            <div className=\" bar red\" ></div>\n            <div className=\" bar yellow\" ></div>\n            <div className=\" bar teal\" ></div>             \n        </div>\n    )\n}\n\n\n// #f44336\n// #ffeb3b\n// #009688","import React, { Component } from 'react'\nimport Spotify from './Spotify'\nimport Apple from './Apple'\nimport Bars from './Bars'\nimport cassette from './cassette-tape.png'\nimport './App.css';\n\nexport default class App extends Component {\n\n  componentDidMount(){\n    const scriptURL = 'https://script.google.com/macros/s/AKfycbymwZ3aN6gunOLUXcKH07VJQWAFHR6mIx4biteWWTeE4rdwC60/exec'\n    const form = document.getElementById('google-form')\n  \n    form.addEventListener('submit', e => {\n      e.preventDefault();\n      fetch(scriptURL, {\n        method: 'POST',\n        body: new FormData(form)\n      })\n        .then(response => console.log('Success!', response))\n        .then(alert(\"Ill shoot you an email for the next one!\"))\n        .then(form.reset())\n        .catch(error => console.log('Error!,', error))\n    })\n  }\n  \n  render() {\n    \n    return (\n      <div className=\"App\">\n        <h1 className=\"App-header\">Tape</h1>\n\n        <Bars />\n\n        <div className=\"cassette-wrapper\" >\n          <span className=\"chapter\">Chapter 005</span>\n          <img src={cassette} className=\"cassette\" alt=\"cassette\"></img>\n          <div className=\"description\">\n            <div className=\"title\">Prismatic</div>\n            <div className=\"text\">\n              <strong>Sorry I'm late this week. I put together a melting pot of quirky, upbeat Alternative RnB/Jazz/Soul and what not. Some of these would definitely seem 'out there' for some, but give them a chance! Some of them took me a few listens to catch on to too. <br></br>Tell me what you think :)</strong>\n            </div>\n          </div>\n        </div>\n\n          <Spotify />\n          <Apple />\n        \n\n        <div className=\"contact\">\n          <form name=\"submit-to-google-sheet\" id=\"google-form\">\n            <div className=\"label\"><strong>Stay updated!</strong></div>\n            <input type=\"email\" name=\"email\" placeholder=\"Email address \" className=\"email-input\" required></input>\n            <input type=\"submit\" value=\"Subscribe\" className=\"subscribe\"></input>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}